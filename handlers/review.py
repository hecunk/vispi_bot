import asyncio
from bot import dis, bt
from states import States
from keyboards import *
from aiogram import types
from aiogram import F
from aiogram.fsm import state
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.enums.parse_mode import ParseMode
from handlers.start import *


@dis.callback_query(StateFilter(States.normal), F.data == 'review')
async def review_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(States.review_wait)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=review_keyboard())


@dis.callback_query(StateFilter(States.review_wait), F.data == 'leave_review')
async def review_leave_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(States.review_write_wait)
    await callback.message.edit_text('–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è, –æ—Ç–∑—ã–≤ –∏ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É —É–ª—É—á—à–∏—Ç—å –≤ —Ä–∞–±–æ—Ç–µ üíóü´Ç', reply_markup=back_button())


@dis.message(StateFilter(States.review_write_wait))
async def review_sendler(message: types.Message, state: FSMContext):
    await bt.send_message(723458129, f'''–í–ò–ö–ö–ò–ü–û –ù–û–í–´–ô –û–¢–ó–´–í –û–¢: @{message.from_user.username}
–û–¢–ó–´–í: {message.text}''')
    await message.answer('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –º–æ–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏, <b>–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –º–Ω–µ –ª—É—á—à–µ</b> üíóüéÄ', reply_markup=back_button(), parse_mode=ParseMode.HTML)
    await state.set_state(States.review_wait)


@dis.callback_query(StateFilter(States.review_write_wait), F.data == 'back')
async def review_write_back(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(States.review_wait)
    await review_message(callback, state)


@dis.callback_query(StateFilter(States.review_wait), F.data == 'back')
async def review_back(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(States.normal)
    await start_message(callback.message)